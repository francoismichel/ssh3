name: Go
on:
  pull_request:
    paths-ignore:
      - '**/README.md'
jobs:
  build-linux:
    strategy:
        matrix:
          go-version: [ '1.20.x', '1.21.x' ]
          goos: [linux]
          testuser: [h3sh-testuser]
          testpasswd: [h3sh-testpasswd]
          testuserhome: [/home/h3sh-testuser]
          archparams: [{goarch: amd64, cc: gcc}] #,{goarch: arm64, cc: aarch64-linux-gnu-gcc}]
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '${{matrix.go-version}}'
      - name: Install dependencies to generate ssh keys and certificates
        run: sudo apt -y update && sudo apt -y install openssh-client openssl
      - name: Generate server cert
        run: pushd / && sudo sh ${{ github.workspace }}/generate_openssl_selfsigned_certificate.sh && popd
      - name: Generate testuser's SSH key
        run: sudo ssh-keygen -b 4096 -t rsa -f /testuser_id_rsa -q -N ""
      - name: Generate testuser's ed25519 SSH key
        run: sudo ssh-keygen -t ed25519 -f /testuser_id_ed25519 -q -N ""
      - name: Generate attacker's SSH key
        run: sudo ssh-keygen -b 4096 -t rsa -f /attacker_id_rsa -q -N ""
      - name: Install
        run: make install
      - name: Add test user
        run: sudo useradd -s /bin/bash -m ${{matrix.testuser}} && echo "${{matrix.testuser}}:${{matrix.testpasswd}}" | sudo chpasswd
      - name: Ensure there are no existing .profile or similar files for testuser
        run:  sudo rm -f ${{matrix.testuserhome}}/.profile ${{matrix.testuserhome}}/.bash_profile ${{matrix.testuserhome}}/.bash_login
      - name: Create .h3sh directory
        run: sudo su ${{matrix.testuser}} -c 'mkdir ${{matrix.testuserhome}}/.ssh ${{matrix.testuserhome}}/.h3sh'
      - name: add the attacker's key as commented in testuser's authorzed identities
        run: echo "#" $(cat attacker_id_rsa.pub) | sudo tee -a ${{matrix.testuserhome}}/.h3sh/authorized_identities
      - name: Put test public keys in testuser's authorized_identities
        run: cat /testuser_id_rsa.pub /testuser_id_ed25519.pub | sudo tee -a ${{matrix.testuserhome}}/.h3sh/authorized_identities
      - name: log authorized_identities
        run: cat ${{matrix.testuserhome}}/.h3sh/authorized_identities
      - name: Integration tests
        run: sudo -E make -e integration-tests
        env:
          CERT_PEM: /cert.pem
          CERT_PRIV_KEY: /priv.key
          ATTACKER_PRIVKEY: /attacker_id_rsa
          TESTUSER_PRIVKEY: /testuser_id_rsa
          TESTUSER_ED25519_PRIVKEY: /testuser_id_ed25519
          TESTUSER_USERNAME: ${{matrix.testuser}}
          CC: ${{matrix.archparams.cc}}
          CGO_ENABLED: "1"
          GOOS: ${{matrix.goos}}
          GOARCH: ${{matrix.archparams.goarch}}
          H3SH_INTEGRATION_TESTS_WITH_SERVER_ENABLED: "1"
  build-macos:
    strategy:
      matrix:
        go-version: [ '1.20.x', '1.21.x' ]
        goos: [darwin]
        goarch: [amd64,arm64]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '${{matrix.go-version}}'
      - name: Install dependencies
        run: go get ./...
      - name: Build Binaries
        run:
          make -e client && make -e server
        env:
          GOOS: ${{matrix.goos}}
          GOARCH: ${{matrix.goarch}}
      - name: Classical unit tests
        if: ${{ matrix.goarch == 'amd64' }} # only actually run the test suite with the architecture of the host
        run: make -e test
        env:
          GOOS: ${{matrix.goos}}
          GOARCH: ${{matrix.goarch}}
  build-other-unix:
    strategy:
      matrix:
        go-version: [ '1.20.x', '1.21.x' ]
        goos: [openbsd,freebsd,linux]
        goarch: [amd64,"386",arm64,arm]
        exclude:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '${{matrix.go-version}}'
      - name: Install dependencies
        run: go get ./...
      - name: Fmt code
        run: |
          go fmt ./...
          git diff --exit-code
      - name: Build Binaries
        run:
          make -e client && make -e server
        env:
          GOOS: ${{matrix.goos}}
          GOARCH: ${{matrix.goarch}}
          GO_TAGS: disable_password_auth
